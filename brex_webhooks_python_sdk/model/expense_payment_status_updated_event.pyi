# coding: utf-8

"""
    Webhooks API

     Brex uses webhooks to send real-time notifications when events happen in the accounts that you manage. Use webhook subscriptions to subscribe to different webhook events. 

    The version of the OpenAPI document: 0.1
    Contact: developer-access@brex.com
    Created by: https://brex.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from brex_webhooks_python_sdk import schemas  # noqa: F401


class ExpensePaymentStatusUpdatedEvent(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The webhook will be sent when an expense payment changes status.
Account must be on Brex Empower to receive these events. Subscription must be registered with a user with the CARD_ADMIN role.
    """


    class MetaOapg:
        required = {
            "payment_type",
            "event_type",
            "payment_status",
            "expense_id",
        }
        
        class properties:
        
            @staticmethod
            def event_type() -> typing.Type['WebhookEventType']:
                return WebhookEventType
            expense_id = schemas.StrSchema
        
            @staticmethod
            def payment_status() -> typing.Type['ExpensePaymentStatus']:
                return ExpensePaymentStatus
        
            @staticmethod
            def payment_type() -> typing.Type['ExpensePaymentType']:
                return ExpensePaymentType
            company_id = schemas.StrSchema
            
            
            class amount(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    all_of_1 = schemas.AnyTypeSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            Money,
                            cls.all_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'amount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            payment_description = schemas.StrSchema
            card_id = schemas.StrSchema
            __annotations__ = {
                "event_type": event_type,
                "expense_id": expense_id,
                "payment_status": payment_status,
                "payment_type": payment_type,
                "company_id": company_id,
                "amount": amount,
                "payment_description": payment_description,
                "card_id": card_id,
            }
    
    payment_type: 'ExpensePaymentType'
    event_type: 'WebhookEventType'
    payment_status: 'ExpensePaymentStatus'
    expense_id: MetaOapg.properties.expense_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_type"]) -> 'WebhookEventType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expense_id"]) -> MetaOapg.properties.expense_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_status"]) -> 'ExpensePaymentStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_type"]) -> 'ExpensePaymentType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_id"]) -> MetaOapg.properties.company_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_description"]) -> MetaOapg.properties.payment_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["card_id"]) -> MetaOapg.properties.card_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["event_type", "expense_id", "payment_status", "payment_type", "company_id", "amount", "payment_description", "card_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_type"]) -> 'WebhookEventType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expense_id"]) -> MetaOapg.properties.expense_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_status"]) -> 'ExpensePaymentStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_type"]) -> 'ExpensePaymentType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_id"]) -> typing.Union[MetaOapg.properties.company_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_description"]) -> typing.Union[MetaOapg.properties.payment_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["card_id"]) -> typing.Union[MetaOapg.properties.card_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["event_type", "expense_id", "payment_status", "payment_type", "company_id", "amount", "payment_description", "card_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        payment_type: 'ExpensePaymentType',
        event_type: 'WebhookEventType',
        payment_status: 'ExpensePaymentStatus',
        expense_id: typing.Union[MetaOapg.properties.expense_id, str, ],
        company_id: typing.Union[MetaOapg.properties.company_id, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        payment_description: typing.Union[MetaOapg.properties.payment_description, str, schemas.Unset] = schemas.unset,
        card_id: typing.Union[MetaOapg.properties.card_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExpensePaymentStatusUpdatedEvent':
        return super().__new__(
            cls,
            *args,
            payment_type=payment_type,
            event_type=event_type,
            payment_status=payment_status,
            expense_id=expense_id,
            company_id=company_id,
            amount=amount,
            payment_description=payment_description,
            card_id=card_id,
            _configuration=_configuration,
            **kwargs,
        )

from brex_webhooks_python_sdk.model.expense_payment_status import ExpensePaymentStatus
from brex_webhooks_python_sdk.model.expense_payment_type import ExpensePaymentType
from brex_webhooks_python_sdk.model.money import Money
from brex_webhooks_python_sdk.model.webhook_event_type import WebhookEventType
